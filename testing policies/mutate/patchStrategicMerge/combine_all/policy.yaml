apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-default-securitycontext
  annotations:
    policies.kyverno.io/title: Add Default securityContext
    policies.kyverno.io/category: Sample
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      A Pod securityContext entry defines fields such as the user and group which should be used to run the Pod.
      Sometimes choosing default values for users rather than blocking is a better alternative to not impede
      such Pod definitions. This policy will mutate a Pod to set `runAsUser`, `runAsGroup`, and `fsGroup` fields
      within the Pod securityContext if they are not already set.      
spec:
  background: false
  rules:
  - name: add-default-securitycontext
    match:
      resources:
        kinds:
        - Pod
    mutate:
      patchStrategicMerge:
        spec:
          securityContext:
            +(runAsUser): 1000
            +(runAsGroup): 3000
            +(fsGroup): 2000

---

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-labels
  annotations:
    policies.kyverno.io/title: Add Labels
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Label
    policies.kyverno.io/description: >-
      Labels are used as an important source of metadata describing objects in various ways
      or triggering other functionality. Labels are also a very basic concept and should be
      used throughout Kubernetes. This policy performs a simple mutation which adds a label
      `foo=bar` to Pods, Services, ConfigMaps, and Secrets.
spec:
  rules:
  - name: add-labels
    match:
      resources:
        kinds:
        - Pod
        - Service
        - ConfigMap
        - Secret
    mutate:
      patchStrategicMerge:
        metadata:
          labels:
            foo: bar

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-ndots
  annotations:
    policies.kyverno.io/title: Add ndots
    policies.kyverno.io/category: Sample
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      The ndots value controls where DNS lookups are first performed in a cluster
      and needs to be set to a lower value than the default of 5 in some cases.
      This policy mutates all Pods to add the ndots option with a value of 1.
spec:
  background: false
  rules:
  - name: add-ndots
    match:
      resources:
        kinds:
        - Pod
    mutate:
      patchStrategicMerge:
        spec:
          dnsConfig:
            options:
              - name: ndots
                value: "1"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-nodeselector
  annotations:
    policies.kyverno.io/title: Add nodeSelector
    policies.kyverno.io/category: Sample
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      The nodeSelector field uses labels to select the node on which a Pod can be scheduled.
      This can be useful when Pods have specific needs that only certain nodes in a cluster can provide.
      This policy adds the nodeSelector field to a Pod spec and configures it with labels `foo` and `color`.
spec:
  background: false
  rules:
  - name: add-nodeselector
    match:
      resources:
        kinds:
        - Pod
    # Adds the `nodeSelector` field to any Pod with two labels.
    mutate:
      patchStrategicMerge:
        spec:
          nodeSelector:
            foo: bar
            color: orange

# ---
# apiVersion: kyverno.io/v1
# kind: ClusterPolicy
# metadata:
#   name: add-volume
#   annotations:
#     policies.kyverno.io/title: Add Volume to Deployment
#     policies.kyverno.io/category: Sample
#     policies.kyverno.io/subject: Deployment, Volume
#     policies.kyverno.io/description: >-
#       Some Kubernetes applications like HashiCorp Vault must perform some modifications
#       to resources in order to invoke their specific functionality. Often times, that functionality
#       is controlled by the presence of a label or specific annotation. This policy, based on HashiCorp
#       Vault, adds a volume and volumeMount to a Deployment if there is an annotation called
#       "vault.k8s.corp.net/inject=enabled" present.
# spec:
#   background: false
#   rules:
#   - name: add-volume
#     match:
#       resources:
#         kinds:
#         - Deployment
#     preconditions:
#     - key: "{{value}}"
#       operator: Equals
#       value: "enabled"
#     mutate:
#       patchesJson6902: |-
#         - op: add
#           path: /spec/template/spec/volumes
#           value: [{"name": "vault-secret","emptyDir": {"medium": "Memory"}}]
#         - op: add
#           path: /spec/template/spec/containers/0/volumeMounts
#           value: [{"mountPath": "/secret","name": "vault-secret"}]

#   # request.object.spec.template.metadata.annotations.\"vault.k8s.corp.net/inject\
